(function() {
  var SassCompiler, spawn, sysPath,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  spawn = require('child_process').spawn;

  sysPath = require('path');

  module.exports = SassCompiler = (function() {

    SassCompiler.prototype.brunchPlugin = true;

    SassCompiler.prototype.type = 'stylesheet';

    SassCompiler.prototype.extension = 'scss';

    SassCompiler.prototype.pattern = /\.s[ac]ss$/;

    SassCompiler.prototype._dependencyRegExp = /@import ['"](.*)['"]/g;

    function SassCompiler(config) {
      this.config = config;
      this.getDependencies = __bind(this.getDependencies, this);
      return;
    }

    SassCompiler.prototype.compile = function(data, path, callback) {
      var error, options, result, sass;
      result = '';
      error = null;
      options = ['--stdin', '--load-path', this.config.paths.root, '--load-path', sysPath.dirname(path), '--no-cache'];
      if (/\.scss$/.test(path)) options.push('--scss');
      sass = spawn('sass', options);
      sass.stdin.end(data);
      sass.stdout.on('data', function(stdout) {
        return result += stdout.toString();
      });
      sass.stderr.on('data', function(stderr) {
        if (error == null) error = '';
        return error += stderr.toString();
      });
      return sass.on('exit', function(code) {
        return callback(error, result);
      });
    };

    SassCompiler.prototype.getDependencies = function(data, path, callback) {
      var dependencies, parent, paths,
        _this = this;
      paths = data.match(this._dependencyRegExp) || [];
      parent = sysPath.dirname(path);
      dependencies = paths.map(function(path) {
        var res;
        res = _this._dependencyRegExp.exec(path);
        _this._dependencyRegExp.lastIndex = 0;
        return (res || [])[1];
      }).map(function(path) {
        path = path.replace(/(\w+\.|\w+$)/, '_$1');
        if (sysPath.extname(path) !== ("." + _this.extension)) {
          return "" + path + "." + _this.extension;
        } else {
          return path;
        }
      }).map(sysPath.join.bind(null, parent));
      return process.nextTick(function() {
        return callback(null, dependencies);
      });
    };

    return SassCompiler;

  })();

}).call(this);
